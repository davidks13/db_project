"""adding tables

Revision ID: 9ed281b1f58d
Revises: 59ef336247ea
Create Date: 2023-12-24 00:50:21.201827

"""
from alembic import op
import sqlalchemy as sa
from data_generator import create_customer_migration, create_product_migration, create_purchase_migration
from models import Customer, Product, Purchase


# revision identifiers, used by Alembic.
revision = '9ed281b1f58d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'products',
        sa.Column('product_id', sa.INTEGER(), server_default=sa.text("nextval('products_product_id_seq'::regclass)"), autoincrement=True, nullable=False),
        sa.Column('product_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column('manufacturer', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column('units', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint('product_id', name='products_pkey'),
        postgresql_ignore_search_path=False
    )
    
    data_to_insert = create_product_migration()
    
    product_instances = [Product(**data) for data in data_to_insert]
    
    if data_to_insert:
        with op.get_context().autocommit_block():
            op.bulk_insert(Product.__table__, [product.__dict__ for product in product_instances])
    else:
        print("Data source is empty.")
        
    op.create_table(
        'customers',
        sa.Column('customer_id', sa.INTEGER(), server_default=sa.text("nextval('customers_customer_id_seq'::regclass)"), autoincrement=True, nullable=False),
        sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column('address', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column('mobile_number', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column('contact_person', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint('customer_id', name='customers_pkey'),
        postgresql_ignore_search_path=False
    )
    
    data_to_insert = create_customer_migration()
    
    customer_instances = [Customer(**data) for data in data_to_insert]
    
    if data_to_insert:
        with op.get_context().autocommit_block():
            op.bulk_insert(Customer.__table__, [customer.__dict__ for customer in customer_instances])
    else:
        print("Data source is empty.")
        
    op.create_table(
        'purchases',
        sa.Column('purchase_id', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('estimated_shipment_date', sa.DATE(), autoincrement=False, nullable=False),
        sa.Column('price_per_unit', sa.Float(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(['customer_id'], ['customers.customer_id'], name='purchases_customer_id_fkey'),
        sa.ForeignKeyConstraint(['product_id'], ['products.product_id'], name='purchases_product_id_fkey'),
        sa.PrimaryKeyConstraint('purchase_id', name='purchases_pkey')
    )
    
    data_to_insert = create_purchase_migration()
    
    purchase_instances = [Purchase(**data) for data in data_to_insert]
    
    if data_to_insert:
        with op.get_context().autocommit_block():
            op.bulk_insert(Purchase.__table__, [purchase.__dict__ for purchase in purchase_instances])
    else:
        print("Data source is empty.")
    
